{ config, ... }:

let
  domain = config.universe.domain;

  acmeDir = config.security.acme.certs.${domain}.directory;
in
{
  services.maddy = {
    enable = true;

    openFirewall = true;

    primaryDomain = domain;
    hostname = "mail.${domain}";

    ensureAccounts = [
      "me@${domain}"
      "bot@${domain}"
    ];
    ensureCredentials = {
      "me@${domain}".passwordFile = config.sops.secrets."planets/pollux/maddy/me".path;
      "bot@${domain}".passwordFile = config.sops.secrets."planets/pollux/maddy/bot".path;
    };

    tls = {
      loader = "file";
      certificates = [
        {
          keyPath = "${acmeDir}/key.pem";
          certPath = "${acmeDir}/cert.pem";
        }
      ];
    };

    config = ''
      auth.pass_table local_authdb {
        table sql_table {
          driver sqlite3
          dsn credentials.db
          table_name passwords
        }
      }

      storage.imapsql local_mailboxes {
        driver sqlite3
        dsn imapsql.db
      }

      table.chain local_rewrites {
        optional_step regexp "(.+)\\+(.+)@(.+)" "$1@$3"
        optional_step static {
          entry postmaster postmaster@$(primary_domain)
        }
        optional_step file /etc/maddy/aliases
      }

      table.chain rcpt_rewrites {
        optional_step regexp "(.+)\\+(.+)@(.+)" "$1@$3"
        optional_step static {
          entry postmaster postmaster@$(primary_domain)
        }
        optional_step file /etc/maddy/aliases
        optional_step regexp "(.+)@$(primary_domain)" "me@$(primary_domain)"
      }

      msgpipeline local_routing {
        check {
          rspamd {
            api_path http://127.0.0.1:11334
          }
        }

        destination "bot@$(primary_domain)" {
          reject 550 5.1.1 "bot does not accept mail"
        }

        destination postmaster $(local_domains) {
          modify { replace_rcpt &rcpt_rewrites }
          deliver_to &local_mailboxes
        }

        default_destination {
          reject 550 5.1.1 "User doesn't exist"
        }
      }

      smtp tcp://0.0.0.0:25 {
        limits {
          all rate 20 1s
          all concurrency 10
        }
        dmarc yes
        check {
          require_mx_record
          dkim
          spf
        }
        source $(local_domains) {
          reject 501 5.1.8 "Use Submission for outgoing SMTP"
        }
        default_source {
          destination postmaster $(local_domains) {
            deliver_to &local_routing
          }
          default_destination {
            reject 550 5.1.1 "User doesn't exist"
          }
        }
      }

      submission tls://0.0.0.0:465 tcp://0.0.0.0:587 {
        limits { all rate 50 1s }
        auth &local_authdb

        source $(local_domains) {
        check {
          authorize_sender {
            prepare_email &local_rewrites

            user_to_email static {
              entry "me@$(primary_domain)" "$(primary_domain)"
              entry "bot@$(primary_domain)" "bot@$(primary_domain)"
            }
          }
        }


          destination postmaster $(local_domains) {
            deliver_to &local_routing
          }

          default_destination {
            modify { dkim $(primary_domain) $(local_domains) default }
            deliver_to &remote_queue
          }
        }

        default_source {
          reject 501 5.1.8 "Non-local sender domain"
        }
      }

      target.remote outbound_delivery {
        limits {
          destination rate 20 1s
          destination concurrency 10
        }
        mx_auth {
          dane
          mtasts {
            cache fs
            fs_dir mtasts_cache/
          }
          local_policy {
            min_tls_level encrypted
            min_mx_level none
          }
        }
      }

      target.queue remote_queue {
        target &outbound_delivery
        autogenerated_msg_domain $(primary_domain)
        bounce {
          destination postmaster $(local_domains) {
            deliver_to &local_routing
          }
          default_destination {
            reject 550 5.0.0 "Refusing to send DSNs to non-local addresses"
          }
        }
      }

      imap tls://0.0.0.0:993 tcp://0.0.0.0:143 {
        auth &local_authdb
        storage &local_mailboxes
      }
    '';
  };

  # environment.etc."maddy/aliases".text = ''
  #   info@${domain}: me@${domain}
  #   contact@${domain}: me@${domain}
  #   git@${domain}: me@${domain}
  # '';

  users = {
    users.maddy = {
      isSystemUser = true;
      group = "maddy";
      extraGroups = [ "acme" ];
    };

    groups.maddy = { };
  };

  networking.firewall.allowedTCPPorts = [
    993
    465
  ];

  sops.secrets = {
    "planets/pollux/maddy/me" = {
      owner = "maddy";
    };
    "planets/pollux/maddy/bot" = {
      owner = "maddy";
    };
  };

  services.go-autoconfig = {
    enable = true;
    settings = {
      service_addr = ":1323";
      domain = "autoconfig.${domain}";
      imap = {
        server = config.services.maddy.hostname;
        port = 993;
      };
      smtp = {
        server = config.services.maddy.hostname;
        port = 587;
      };
    };
  };

  services.rspamd = {
    enable = true;
    locals = {
      "dkim_signing.conf".text = ''
        selector = "default";
        domain = "project-insanity.org";
        path = "/var/lib/maddy/dkim_keys/$domain_$selector.key";
      '';

      "redis.conf".text = ''
        servers = "${config.services.redis.servers.rspamd.unixSocket}";
      '';

      "classifier-bayes.conf".text = ''
        backend = "redis";
        autolearn = true;
      '';
    };
  };
  systemd.services.rspamd.serviceConfig.SupplementaryGroups = [ "maddy" ];

  services.redis.servers.rspamd = {
    enable = true;
    port = 0;
    user = config.services.rspamd.user;
  };

  services.traefik.dynamicConfigOptions.http = {
    routers.maddy-autoconfig = {
      rule = "Host(`${config.services.go-autoconfig.settings.domain}`)";
      entryPoints = [ "websecure" ];
      service = "maddy-autoconfig";
    };
    services.maddy-autoconfig = {
      loadBalancer.servers = [
        {
          url = "http://localhost${config.services.go-autoconfig.settings.service_addr}";
        }
      ];
    };
  };
}
